//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GlobalObjects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DSVRCConfig")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSVRCConfig : global::System.Data.DataSet {
        
        private LogWriterDataTable tableLogWriter;
        
        private MailSenderDataTable tableMailSender;
        
        private ClientConnectionsDataTable tableClientConnections;
        
        private ConnectionGuardDataTable tableConnectionGuard;
        
        private ServerConnectionsDataTable tableServerConnections;
        
        private PoolOptimizerDataTable tablePoolOptimizer;
        
        private LDCClientDataTable tableLDCClient;
        
        private TransactionSaverDataTable tableTransactionSaver;
        
        private ConnectionsDataTable tableConnections;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSVRCConfig() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSVRCConfig(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LogWriter"] != null)) {
                    base.Tables.Add(new LogWriterDataTable(ds.Tables["LogWriter"]));
                }
                if ((ds.Tables["MailSender"] != null)) {
                    base.Tables.Add(new MailSenderDataTable(ds.Tables["MailSender"]));
                }
                if ((ds.Tables["ClientConnections"] != null)) {
                    base.Tables.Add(new ClientConnectionsDataTable(ds.Tables["ClientConnections"]));
                }
                if ((ds.Tables["ConnectionGuard"] != null)) {
                    base.Tables.Add(new ConnectionGuardDataTable(ds.Tables["ConnectionGuard"]));
                }
                if ((ds.Tables["ServerConnections"] != null)) {
                    base.Tables.Add(new ServerConnectionsDataTable(ds.Tables["ServerConnections"]));
                }
                if ((ds.Tables["PoolOptimizer"] != null)) {
                    base.Tables.Add(new PoolOptimizerDataTable(ds.Tables["PoolOptimizer"]));
                }
                if ((ds.Tables["LDCClient"] != null)) {
                    base.Tables.Add(new LDCClientDataTable(ds.Tables["LDCClient"]));
                }
                if ((ds.Tables["TransactionSaver"] != null)) {
                    base.Tables.Add(new TransactionSaverDataTable(ds.Tables["TransactionSaver"]));
                }
                if ((ds.Tables["Connections"] != null)) {
                    base.Tables.Add(new ConnectionsDataTable(ds.Tables["Connections"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LogWriterDataTable LogWriter {
            get {
                return this.tableLogWriter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MailSenderDataTable MailSender {
            get {
                return this.tableMailSender;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientConnectionsDataTable ClientConnections {
            get {
                return this.tableClientConnections;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionGuardDataTable ConnectionGuard {
            get {
                return this.tableConnectionGuard;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerConnectionsDataTable ServerConnections {
            get {
                return this.tableServerConnections;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PoolOptimizerDataTable PoolOptimizer {
            get {
                return this.tablePoolOptimizer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LDCClientDataTable LDCClient {
            get {
                return this.tableLDCClient;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransactionSaverDataTable TransactionSaver {
            get {
                return this.tableTransactionSaver;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionsDataTable Connections {
            get {
                return this.tableConnections;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DSVRCConfig cln = ((DSVRCConfig)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LogWriter"] != null)) {
                    base.Tables.Add(new LogWriterDataTable(ds.Tables["LogWriter"]));
                }
                if ((ds.Tables["MailSender"] != null)) {
                    base.Tables.Add(new MailSenderDataTable(ds.Tables["MailSender"]));
                }
                if ((ds.Tables["ClientConnections"] != null)) {
                    base.Tables.Add(new ClientConnectionsDataTable(ds.Tables["ClientConnections"]));
                }
                if ((ds.Tables["ConnectionGuard"] != null)) {
                    base.Tables.Add(new ConnectionGuardDataTable(ds.Tables["ConnectionGuard"]));
                }
                if ((ds.Tables["ServerConnections"] != null)) {
                    base.Tables.Add(new ServerConnectionsDataTable(ds.Tables["ServerConnections"]));
                }
                if ((ds.Tables["PoolOptimizer"] != null)) {
                    base.Tables.Add(new PoolOptimizerDataTable(ds.Tables["PoolOptimizer"]));
                }
                if ((ds.Tables["LDCClient"] != null)) {
                    base.Tables.Add(new LDCClientDataTable(ds.Tables["LDCClient"]));
                }
                if ((ds.Tables["TransactionSaver"] != null)) {
                    base.Tables.Add(new TransactionSaverDataTable(ds.Tables["TransactionSaver"]));
                }
                if ((ds.Tables["Connections"] != null)) {
                    base.Tables.Add(new ConnectionsDataTable(ds.Tables["Connections"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLogWriter = ((LogWriterDataTable)(base.Tables["LogWriter"]));
            if ((initTable == true)) {
                if ((this.tableLogWriter != null)) {
                    this.tableLogWriter.InitVars();
                }
            }
            this.tableMailSender = ((MailSenderDataTable)(base.Tables["MailSender"]));
            if ((initTable == true)) {
                if ((this.tableMailSender != null)) {
                    this.tableMailSender.InitVars();
                }
            }
            this.tableClientConnections = ((ClientConnectionsDataTable)(base.Tables["ClientConnections"]));
            if ((initTable == true)) {
                if ((this.tableClientConnections != null)) {
                    this.tableClientConnections.InitVars();
                }
            }
            this.tableConnectionGuard = ((ConnectionGuardDataTable)(base.Tables["ConnectionGuard"]));
            if ((initTable == true)) {
                if ((this.tableConnectionGuard != null)) {
                    this.tableConnectionGuard.InitVars();
                }
            }
            this.tableServerConnections = ((ServerConnectionsDataTable)(base.Tables["ServerConnections"]));
            if ((initTable == true)) {
                if ((this.tableServerConnections != null)) {
                    this.tableServerConnections.InitVars();
                }
            }
            this.tablePoolOptimizer = ((PoolOptimizerDataTable)(base.Tables["PoolOptimizer"]));
            if ((initTable == true)) {
                if ((this.tablePoolOptimizer != null)) {
                    this.tablePoolOptimizer.InitVars();
                }
            }
            this.tableLDCClient = ((LDCClientDataTable)(base.Tables["LDCClient"]));
            if ((initTable == true)) {
                if ((this.tableLDCClient != null)) {
                    this.tableLDCClient.InitVars();
                }
            }
            this.tableTransactionSaver = ((TransactionSaverDataTable)(base.Tables["TransactionSaver"]));
            if ((initTable == true)) {
                if ((this.tableTransactionSaver != null)) {
                    this.tableTransactionSaver.InitVars();
                }
            }
            this.tableConnections = ((ConnectionsDataTable)(base.Tables["Connections"]));
            if ((initTable == true)) {
                if ((this.tableConnections != null)) {
                    this.tableConnections.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSVRCConfig";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSVCRConfig.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLogWriter = new LogWriterDataTable();
            base.Tables.Add(this.tableLogWriter);
            this.tableMailSender = new MailSenderDataTable();
            base.Tables.Add(this.tableMailSender);
            this.tableClientConnections = new ClientConnectionsDataTable();
            base.Tables.Add(this.tableClientConnections);
            this.tableConnectionGuard = new ConnectionGuardDataTable();
            base.Tables.Add(this.tableConnectionGuard);
            this.tableServerConnections = new ServerConnectionsDataTable();
            base.Tables.Add(this.tableServerConnections);
            this.tablePoolOptimizer = new PoolOptimizerDataTable();
            base.Tables.Add(this.tablePoolOptimizer);
            this.tableLDCClient = new LDCClientDataTable();
            base.Tables.Add(this.tableLDCClient);
            this.tableTransactionSaver = new TransactionSaverDataTable();
            base.Tables.Add(this.tableTransactionSaver);
            this.tableConnections = new ConnectionsDataTable();
            base.Tables.Add(this.tableConnections);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLogWriter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMailSender() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientConnections() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConnectionGuard() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerConnections() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePoolOptimizer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLDCClient() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTransactionSaver() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConnections() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DSVRCConfig ds = new DSVRCConfig();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LogWriterRowChangeEventHandler(object sender, LogWriterRowChangeEvent e);
        
        public delegate void MailSenderRowChangeEventHandler(object sender, MailSenderRowChangeEvent e);
        
        public delegate void ClientConnectionsRowChangeEventHandler(object sender, ClientConnectionsRowChangeEvent e);
        
        public delegate void ConnectionGuardRowChangeEventHandler(object sender, ConnectionGuardRowChangeEvent e);
        
        public delegate void ServerConnectionsRowChangeEventHandler(object sender, ServerConnectionsRowChangeEvent e);
        
        public delegate void PoolOptimizerRowChangeEventHandler(object sender, PoolOptimizerRowChangeEvent e);
        
        public delegate void LDCClientRowChangeEventHandler(object sender, LDCClientRowChangeEvent e);
        
        public delegate void TransactionSaverRowChangeEventHandler(object sender, TransactionSaverRowChangeEvent e);
        
        public delegate void ConnectionsRowChangeEventHandler(object sender, ConnectionsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LogWriterDataTable : global::System.Data.TypedTableBase<LogWriterRow> {
            
            private global::System.Data.DataColumn columnPathFileName;
            
            private global::System.Data.DataColumn columnLogLevel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogWriterDataTable() {
                this.TableName = "LogWriter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogWriterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LogWriterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PathFileNameColumn {
                get {
                    return this.columnPathFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogLevelColumn {
                get {
                    return this.columnLogLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogWriterRow this[int index] {
                get {
                    return ((LogWriterRow)(this.Rows[index]));
                }
            }
            
            public event LogWriterRowChangeEventHandler LogWriterRowChanging;
            
            public event LogWriterRowChangeEventHandler LogWriterRowChanged;
            
            public event LogWriterRowChangeEventHandler LogWriterRowDeleting;
            
            public event LogWriterRowChangeEventHandler LogWriterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLogWriterRow(LogWriterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogWriterRow AddLogWriterRow(string PathFileName, string LogLevel) {
                LogWriterRow rowLogWriterRow = ((LogWriterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PathFileName,
                        LogLevel};
                rowLogWriterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLogWriterRow);
                return rowLogWriterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LogWriterDataTable cln = ((LogWriterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LogWriterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPathFileName = base.Columns["PathFileName"];
                this.columnLogLevel = base.Columns["LogLevel"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPathFileName = new global::System.Data.DataColumn("PathFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPathFileName);
                this.columnLogLevel = new global::System.Data.DataColumn("LogLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogLevel);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogWriterRow NewLogWriterRow() {
                return ((LogWriterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LogWriterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LogWriterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LogWriterRowChanged != null)) {
                    this.LogWriterRowChanged(this, new LogWriterRowChangeEvent(((LogWriterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LogWriterRowChanging != null)) {
                    this.LogWriterRowChanging(this, new LogWriterRowChangeEvent(((LogWriterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LogWriterRowDeleted != null)) {
                    this.LogWriterRowDeleted(this, new LogWriterRowChangeEvent(((LogWriterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LogWriterRowDeleting != null)) {
                    this.LogWriterRowDeleting(this, new LogWriterRowChangeEvent(((LogWriterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLogWriterRow(LogWriterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LogWriterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MailSenderDataTable : global::System.Data.TypedTableBase<MailSenderRow> {
            
            private global::System.Data.DataColumn columnServerName;
            
            private global::System.Data.DataColumn columnRecipient;
            
            private global::System.Data.DataColumn columnSmtpServerPort;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailSenderDataTable() {
                this.TableName = "MailSender";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MailSenderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MailSenderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServerNameColumn {
                get {
                    return this.columnServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecipientColumn {
                get {
                    return this.columnRecipient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SmtpServerPortColumn {
                get {
                    return this.columnSmtpServerPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailSenderRow this[int index] {
                get {
                    return ((MailSenderRow)(this.Rows[index]));
                }
            }
            
            public event MailSenderRowChangeEventHandler MailSenderRowChanging;
            
            public event MailSenderRowChangeEventHandler MailSenderRowChanged;
            
            public event MailSenderRowChangeEventHandler MailSenderRowDeleting;
            
            public event MailSenderRowChangeEventHandler MailSenderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMailSenderRow(MailSenderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailSenderRow AddMailSenderRow(string ServerName, string Recipient, int SmtpServerPort) {
                MailSenderRow rowMailSenderRow = ((MailSenderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServerName,
                        Recipient,
                        SmtpServerPort};
                rowMailSenderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMailSenderRow);
                return rowMailSenderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MailSenderDataTable cln = ((MailSenderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MailSenderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServerName = base.Columns["ServerName"];
                this.columnRecipient = base.Columns["Recipient"];
                this.columnSmtpServerPort = base.Columns["SmtpServerPort"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServerName = new global::System.Data.DataColumn("ServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerName);
                this.columnRecipient = new global::System.Data.DataColumn("Recipient", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecipient);
                this.columnSmtpServerPort = new global::System.Data.DataColumn("SmtpServerPort", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmtpServerPort);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailSenderRow NewMailSenderRow() {
                return ((MailSenderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MailSenderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MailSenderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MailSenderRowChanged != null)) {
                    this.MailSenderRowChanged(this, new MailSenderRowChangeEvent(((MailSenderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MailSenderRowChanging != null)) {
                    this.MailSenderRowChanging(this, new MailSenderRowChangeEvent(((MailSenderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MailSenderRowDeleted != null)) {
                    this.MailSenderRowDeleted(this, new MailSenderRowChangeEvent(((MailSenderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MailSenderRowDeleting != null)) {
                    this.MailSenderRowDeleting(this, new MailSenderRowChangeEvent(((MailSenderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMailSenderRow(MailSenderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MailSenderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientConnectionsDataTable : global::System.Data.TypedTableBase<ClientConnectionsRow> {
            
            private global::System.Data.DataColumn columnportNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientConnectionsDataTable() {
                this.TableName = "ClientConnections";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientConnectionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientConnectionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn portNumberColumn {
                get {
                    return this.columnportNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientConnectionsRow this[int index] {
                get {
                    return ((ClientConnectionsRow)(this.Rows[index]));
                }
            }
            
            public event ClientConnectionsRowChangeEventHandler ClientConnectionsRowChanging;
            
            public event ClientConnectionsRowChangeEventHandler ClientConnectionsRowChanged;
            
            public event ClientConnectionsRowChangeEventHandler ClientConnectionsRowDeleting;
            
            public event ClientConnectionsRowChangeEventHandler ClientConnectionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientConnectionsRow(ClientConnectionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientConnectionsRow AddClientConnectionsRow(int portNumber) {
                ClientConnectionsRow rowClientConnectionsRow = ((ClientConnectionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        portNumber};
                rowClientConnectionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientConnectionsRow);
                return rowClientConnectionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientConnectionsDataTable cln = ((ClientConnectionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientConnectionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnportNumber = base.Columns["portNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnportNumber = new global::System.Data.DataColumn("portNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnportNumber);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientConnectionsRow NewClientConnectionsRow() {
                return ((ClientConnectionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientConnectionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientConnectionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientConnectionsRowChanged != null)) {
                    this.ClientConnectionsRowChanged(this, new ClientConnectionsRowChangeEvent(((ClientConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientConnectionsRowChanging != null)) {
                    this.ClientConnectionsRowChanging(this, new ClientConnectionsRowChangeEvent(((ClientConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientConnectionsRowDeleted != null)) {
                    this.ClientConnectionsRowDeleted(this, new ClientConnectionsRowChangeEvent(((ClientConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientConnectionsRowDeleting != null)) {
                    this.ClientConnectionsRowDeleting(this, new ClientConnectionsRowChangeEvent(((ClientConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientConnectionsRow(ClientConnectionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientConnectionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConnectionGuardDataTable : global::System.Data.TypedTableBase<ConnectionGuardRow> {
            
            private global::System.Data.DataColumn columnPingInterval;
            
            private global::System.Data.DataColumn columnLoginInterval;
            
            private global::System.Data.DataColumn columnDownTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionGuardDataTable() {
                this.TableName = "ConnectionGuard";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionGuardDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConnectionGuardDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PingIntervalColumn {
                get {
                    return this.columnPingInterval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginIntervalColumn {
                get {
                    return this.columnLoginInterval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownTimeColumn {
                get {
                    return this.columnDownTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionGuardRow this[int index] {
                get {
                    return ((ConnectionGuardRow)(this.Rows[index]));
                }
            }
            
            public event ConnectionGuardRowChangeEventHandler ConnectionGuardRowChanging;
            
            public event ConnectionGuardRowChangeEventHandler ConnectionGuardRowChanged;
            
            public event ConnectionGuardRowChangeEventHandler ConnectionGuardRowDeleting;
            
            public event ConnectionGuardRowChangeEventHandler ConnectionGuardRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConnectionGuardRow(ConnectionGuardRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionGuardRow AddConnectionGuardRow(int PingInterval, int LoginInterval, int DownTime) {
                ConnectionGuardRow rowConnectionGuardRow = ((ConnectionGuardRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PingInterval,
                        LoginInterval,
                        DownTime};
                rowConnectionGuardRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConnectionGuardRow);
                return rowConnectionGuardRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConnectionGuardDataTable cln = ((ConnectionGuardDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConnectionGuardDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPingInterval = base.Columns["PingInterval"];
                this.columnLoginInterval = base.Columns["LoginInterval"];
                this.columnDownTime = base.Columns["DownTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPingInterval = new global::System.Data.DataColumn("PingInterval", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPingInterval);
                this.columnLoginInterval = new global::System.Data.DataColumn("LoginInterval", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginInterval);
                this.columnDownTime = new global::System.Data.DataColumn("DownTime", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownTime);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionGuardRow NewConnectionGuardRow() {
                return ((ConnectionGuardRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConnectionGuardRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConnectionGuardRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionGuardRowChanged != null)) {
                    this.ConnectionGuardRowChanged(this, new ConnectionGuardRowChangeEvent(((ConnectionGuardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionGuardRowChanging != null)) {
                    this.ConnectionGuardRowChanging(this, new ConnectionGuardRowChangeEvent(((ConnectionGuardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionGuardRowDeleted != null)) {
                    this.ConnectionGuardRowDeleted(this, new ConnectionGuardRowChangeEvent(((ConnectionGuardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionGuardRowDeleting != null)) {
                    this.ConnectionGuardRowDeleting(this, new ConnectionGuardRowChangeEvent(((ConnectionGuardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConnectionGuardRow(ConnectionGuardRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConnectionGuardDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerConnectionsDataTable : global::System.Data.TypedTableBase<ServerConnectionsRow> {
            
            private global::System.Data.DataColumn columnServerList;
            
            private global::System.Data.DataColumn columnTimeout;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerConnectionsDataTable() {
                this.TableName = "ServerConnections";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerConnectionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerConnectionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServerListColumn {
                get {
                    return this.columnServerList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeoutColumn {
                get {
                    return this.columnTimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerConnectionsRow this[int index] {
                get {
                    return ((ServerConnectionsRow)(this.Rows[index]));
                }
            }
            
            public event ServerConnectionsRowChangeEventHandler ServerConnectionsRowChanging;
            
            public event ServerConnectionsRowChangeEventHandler ServerConnectionsRowChanged;
            
            public event ServerConnectionsRowChangeEventHandler ServerConnectionsRowDeleting;
            
            public event ServerConnectionsRowChangeEventHandler ServerConnectionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerConnectionsRow(ServerConnectionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerConnectionsRow AddServerConnectionsRow(string ServerList, int Timeout) {
                ServerConnectionsRow rowServerConnectionsRow = ((ServerConnectionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServerList,
                        Timeout};
                rowServerConnectionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowServerConnectionsRow);
                return rowServerConnectionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ServerConnectionsDataTable cln = ((ServerConnectionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ServerConnectionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServerList = base.Columns["ServerList"];
                this.columnTimeout = base.Columns["Timeout"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServerList = new global::System.Data.DataColumn("ServerList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerList);
                this.columnTimeout = new global::System.Data.DataColumn("Timeout", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeout);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerConnectionsRow NewServerConnectionsRow() {
                return ((ServerConnectionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ServerConnectionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ServerConnectionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerConnectionsRowChanged != null)) {
                    this.ServerConnectionsRowChanged(this, new ServerConnectionsRowChangeEvent(((ServerConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerConnectionsRowChanging != null)) {
                    this.ServerConnectionsRowChanging(this, new ServerConnectionsRowChangeEvent(((ServerConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerConnectionsRowDeleted != null)) {
                    this.ServerConnectionsRowDeleted(this, new ServerConnectionsRowChangeEvent(((ServerConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerConnectionsRowDeleting != null)) {
                    this.ServerConnectionsRowDeleting(this, new ServerConnectionsRowChangeEvent(((ServerConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerConnectionsRow(ServerConnectionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerConnectionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PoolOptimizerDataTable : global::System.Data.TypedTableBase<PoolOptimizerRow> {
            
            private global::System.Data.DataColumn columnPollingInterval;
            
            private global::System.Data.DataColumn columnObjectLifeTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoolOptimizerDataTable() {
                this.TableName = "PoolOptimizer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PoolOptimizerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PoolOptimizerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PollingIntervalColumn {
                get {
                    return this.columnPollingInterval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectLifeTimeColumn {
                get {
                    return this.columnObjectLifeTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoolOptimizerRow this[int index] {
                get {
                    return ((PoolOptimizerRow)(this.Rows[index]));
                }
            }
            
            public event PoolOptimizerRowChangeEventHandler PoolOptimizerRowChanging;
            
            public event PoolOptimizerRowChangeEventHandler PoolOptimizerRowChanged;
            
            public event PoolOptimizerRowChangeEventHandler PoolOptimizerRowDeleting;
            
            public event PoolOptimizerRowChangeEventHandler PoolOptimizerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPoolOptimizerRow(PoolOptimizerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoolOptimizerRow AddPoolOptimizerRow(int PollingInterval, int ObjectLifeTime) {
                PoolOptimizerRow rowPoolOptimizerRow = ((PoolOptimizerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PollingInterval,
                        ObjectLifeTime};
                rowPoolOptimizerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPoolOptimizerRow);
                return rowPoolOptimizerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PoolOptimizerDataTable cln = ((PoolOptimizerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PoolOptimizerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPollingInterval = base.Columns["PollingInterval"];
                this.columnObjectLifeTime = base.Columns["ObjectLifeTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPollingInterval = new global::System.Data.DataColumn("PollingInterval", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPollingInterval);
                this.columnObjectLifeTime = new global::System.Data.DataColumn("ObjectLifeTime", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectLifeTime);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoolOptimizerRow NewPoolOptimizerRow() {
                return ((PoolOptimizerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PoolOptimizerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PoolOptimizerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PoolOptimizerRowChanged != null)) {
                    this.PoolOptimizerRowChanged(this, new PoolOptimizerRowChangeEvent(((PoolOptimizerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PoolOptimizerRowChanging != null)) {
                    this.PoolOptimizerRowChanging(this, new PoolOptimizerRowChangeEvent(((PoolOptimizerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PoolOptimizerRowDeleted != null)) {
                    this.PoolOptimizerRowDeleted(this, new PoolOptimizerRowChangeEvent(((PoolOptimizerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PoolOptimizerRowDeleting != null)) {
                    this.PoolOptimizerRowDeleting(this, new PoolOptimizerRowChangeEvent(((PoolOptimizerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePoolOptimizerRow(PoolOptimizerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PoolOptimizerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LDCClientDataTable : global::System.Data.TypedTableBase<LDCClientRow> {
            
            private global::System.Data.DataColumn columnCommandIteration;
            
            private global::System.Data.DataColumn columnHoldingTime;
            
            private global::System.Data.DataColumn columnTrafficDuration;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LDCClientDataTable() {
                this.TableName = "LDCClient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LDCClientDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LDCClientDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommandIterationColumn {
                get {
                    return this.columnCommandIteration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldingTimeColumn {
                get {
                    return this.columnHoldingTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficDurationColumn {
                get {
                    return this.columnTrafficDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LDCClientRow this[int index] {
                get {
                    return ((LDCClientRow)(this.Rows[index]));
                }
            }
            
            public event LDCClientRowChangeEventHandler LDCClientRowChanging;
            
            public event LDCClientRowChangeEventHandler LDCClientRowChanged;
            
            public event LDCClientRowChangeEventHandler LDCClientRowDeleting;
            
            public event LDCClientRowChangeEventHandler LDCClientRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLDCClientRow(LDCClientRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LDCClientRow AddLDCClientRow(int CommandIteration, int HoldingTime, int TrafficDuration) {
                LDCClientRow rowLDCClientRow = ((LDCClientRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CommandIteration,
                        HoldingTime,
                        TrafficDuration};
                rowLDCClientRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLDCClientRow);
                return rowLDCClientRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LDCClientDataTable cln = ((LDCClientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LDCClientDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCommandIteration = base.Columns["CommandIteration"];
                this.columnHoldingTime = base.Columns["HoldingTime"];
                this.columnTrafficDuration = base.Columns["TrafficDuration"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCommandIteration = new global::System.Data.DataColumn("CommandIteration", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommandIteration);
                this.columnHoldingTime = new global::System.Data.DataColumn("HoldingTime", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldingTime);
                this.columnTrafficDuration = new global::System.Data.DataColumn("TrafficDuration", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficDuration);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LDCClientRow NewLDCClientRow() {
                return ((LDCClientRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LDCClientRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LDCClientRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LDCClientRowChanged != null)) {
                    this.LDCClientRowChanged(this, new LDCClientRowChangeEvent(((LDCClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LDCClientRowChanging != null)) {
                    this.LDCClientRowChanging(this, new LDCClientRowChangeEvent(((LDCClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LDCClientRowDeleted != null)) {
                    this.LDCClientRowDeleted(this, new LDCClientRowChangeEvent(((LDCClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LDCClientRowDeleting != null)) {
                    this.LDCClientRowDeleting(this, new LDCClientRowChangeEvent(((LDCClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLDCClientRow(LDCClientRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LDCClientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TransactionSaverDataTable : global::System.Data.TypedTableBase<TransactionSaverRow> {
            
            private global::System.Data.DataColumn columnDsn;
            
            private global::System.Data.DataColumn columnServerName;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnDataBaseName;
            
            private global::System.Data.DataColumn columnExportPathFileName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionSaverDataTable() {
                this.TableName = "TransactionSaver";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionSaverDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TransactionSaverDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DsnColumn {
                get {
                    return this.columnDsn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServerNameColumn {
                get {
                    return this.columnServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataBaseNameColumn {
                get {
                    return this.columnDataBaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExportPathFileNameColumn {
                get {
                    return this.columnExportPathFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionSaverRow this[int index] {
                get {
                    return ((TransactionSaverRow)(this.Rows[index]));
                }
            }
            
            public event TransactionSaverRowChangeEventHandler TransactionSaverRowChanging;
            
            public event TransactionSaverRowChangeEventHandler TransactionSaverRowChanged;
            
            public event TransactionSaverRowChangeEventHandler TransactionSaverRowDeleting;
            
            public event TransactionSaverRowChangeEventHandler TransactionSaverRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTransactionSaverRow(TransactionSaverRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionSaverRow AddTransactionSaverRow(string Dsn, string ServerName, string UserID, string Password, string DataBaseName, string ExportPathFileName) {
                TransactionSaverRow rowTransactionSaverRow = ((TransactionSaverRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Dsn,
                        ServerName,
                        UserID,
                        Password,
                        DataBaseName,
                        ExportPathFileName};
                rowTransactionSaverRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTransactionSaverRow);
                return rowTransactionSaverRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TransactionSaverDataTable cln = ((TransactionSaverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TransactionSaverDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDsn = base.Columns["Dsn"];
                this.columnServerName = base.Columns["ServerName"];
                this.columnUserID = base.Columns["UserID"];
                this.columnPassword = base.Columns["Password"];
                this.columnDataBaseName = base.Columns["DataBaseName"];
                this.columnExportPathFileName = base.Columns["ExportPathFileName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDsn = new global::System.Data.DataColumn("Dsn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDsn);
                this.columnServerName = new global::System.Data.DataColumn("ServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerName);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnDataBaseName = new global::System.Data.DataColumn("DataBaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataBaseName);
                this.columnExportPathFileName = new global::System.Data.DataColumn("ExportPathFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExportPathFileName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionSaverRow NewTransactionSaverRow() {
                return ((TransactionSaverRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TransactionSaverRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TransactionSaverRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransactionSaverRowChanged != null)) {
                    this.TransactionSaverRowChanged(this, new TransactionSaverRowChangeEvent(((TransactionSaverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransactionSaverRowChanging != null)) {
                    this.TransactionSaverRowChanging(this, new TransactionSaverRowChangeEvent(((TransactionSaverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransactionSaverRowDeleted != null)) {
                    this.TransactionSaverRowDeleted(this, new TransactionSaverRowChangeEvent(((TransactionSaverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransactionSaverRowDeleting != null)) {
                    this.TransactionSaverRowDeleting(this, new TransactionSaverRowChangeEvent(((TransactionSaverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTransactionSaverRow(TransactionSaverRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TransactionSaverDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConnectionsDataTable : global::System.Data.TypedTableBase<ConnectionsRow> {
            
            private global::System.Data.DataColumn columnLDCServers;
            
            private global::System.Data.DataColumn columnClients;
            
            private global::System.Data.DataColumn columnRemotingPortNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionsDataTable() {
                this.TableName = "Connections";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConnectionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LDCServersColumn {
                get {
                    return this.columnLDCServers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientsColumn {
                get {
                    return this.columnClients;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemotingPortNumberColumn {
                get {
                    return this.columnRemotingPortNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionsRow this[int index] {
                get {
                    return ((ConnectionsRow)(this.Rows[index]));
                }
            }
            
            public event ConnectionsRowChangeEventHandler ConnectionsRowChanging;
            
            public event ConnectionsRowChangeEventHandler ConnectionsRowChanged;
            
            public event ConnectionsRowChangeEventHandler ConnectionsRowDeleting;
            
            public event ConnectionsRowChangeEventHandler ConnectionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConnectionsRow(ConnectionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionsRow AddConnectionsRow(string LDCServers, int Clients, int RemotingPortNumber) {
                ConnectionsRow rowConnectionsRow = ((ConnectionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LDCServers,
                        Clients,
                        RemotingPortNumber};
                rowConnectionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConnectionsRow);
                return rowConnectionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConnectionsDataTable cln = ((ConnectionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConnectionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLDCServers = base.Columns["LDCServers"];
                this.columnClients = base.Columns["Clients"];
                this.columnRemotingPortNumber = base.Columns["RemotingPortNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLDCServers = new global::System.Data.DataColumn("LDCServers", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLDCServers);
                this.columnClients = new global::System.Data.DataColumn("Clients", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClients);
                this.columnRemotingPortNumber = new global::System.Data.DataColumn("RemotingPortNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemotingPortNumber);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionsRow NewConnectionsRow() {
                return ((ConnectionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConnectionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConnectionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionsRowChanged != null)) {
                    this.ConnectionsRowChanged(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionsRowChanging != null)) {
                    this.ConnectionsRowChanging(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionsRowDeleted != null)) {
                    this.ConnectionsRowDeleted(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionsRowDeleting != null)) {
                    this.ConnectionsRowDeleting(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConnectionsRow(ConnectionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSVRCConfig ds = new DSVRCConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConnectionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LogWriterRow : global::System.Data.DataRow {
            
            private LogWriterDataTable tableLogWriter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogWriterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLogWriter = ((LogWriterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PathFileName {
                get {
                    try {
                        return ((string)(this[this.tableLogWriter.PathFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PathFileName\' in table \'LogWriter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogWriter.PathFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogLevel {
                get {
                    try {
                        return ((string)(this[this.tableLogWriter.LogLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LogLevel\' in table \'LogWriter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogWriter.LogLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPathFileNameNull() {
                return this.IsNull(this.tableLogWriter.PathFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPathFileNameNull() {
                this[this.tableLogWriter.PathFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogLevelNull() {
                return this.IsNull(this.tableLogWriter.LogLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogLevelNull() {
                this[this.tableLogWriter.LogLevelColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MailSenderRow : global::System.Data.DataRow {
            
            private MailSenderDataTable tableMailSender;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MailSenderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMailSender = ((MailSenderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServerName {
                get {
                    try {
                        return ((string)(this[this.tableMailSender.ServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServerName\' in table \'MailSender\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailSender.ServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Recipient {
                get {
                    try {
                        return ((string)(this[this.tableMailSender.RecipientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Recipient\' in table \'MailSender\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailSender.RecipientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SmtpServerPort {
                get {
                    try {
                        return ((int)(this[this.tableMailSender.SmtpServerPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SmtpServerPort\' in table \'MailSender\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailSender.SmtpServerPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerNameNull() {
                return this.IsNull(this.tableMailSender.ServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerNameNull() {
                this[this.tableMailSender.ServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecipientNull() {
                return this.IsNull(this.tableMailSender.RecipientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecipientNull() {
                this[this.tableMailSender.RecipientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSmtpServerPortNull() {
                return this.IsNull(this.tableMailSender.SmtpServerPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSmtpServerPortNull() {
                this[this.tableMailSender.SmtpServerPortColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientConnectionsRow : global::System.Data.DataRow {
            
            private ClientConnectionsDataTable tableClientConnections;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientConnectionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientConnections = ((ClientConnectionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int portNumber {
                get {
                    try {
                        return ((int)(this[this.tableClientConnections.portNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'portNumber\' in table \'ClientConnections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientConnections.portNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsportNumberNull() {
                return this.IsNull(this.tableClientConnections.portNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetportNumberNull() {
                this[this.tableClientConnections.portNumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConnectionGuardRow : global::System.Data.DataRow {
            
            private ConnectionGuardDataTable tableConnectionGuard;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionGuardRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnectionGuard = ((ConnectionGuardDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PingInterval {
                get {
                    try {
                        return ((int)(this[this.tableConnectionGuard.PingIntervalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PingInterval\' in table \'ConnectionGuard\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnectionGuard.PingIntervalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoginInterval {
                get {
                    try {
                        return ((int)(this[this.tableConnectionGuard.LoginIntervalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoginInterval\' in table \'ConnectionGuard\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnectionGuard.LoginIntervalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DownTime {
                get {
                    try {
                        return ((int)(this[this.tableConnectionGuard.DownTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownTime\' in table \'ConnectionGuard\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnectionGuard.DownTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPingIntervalNull() {
                return this.IsNull(this.tableConnectionGuard.PingIntervalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPingIntervalNull() {
                this[this.tableConnectionGuard.PingIntervalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoginIntervalNull() {
                return this.IsNull(this.tableConnectionGuard.LoginIntervalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoginIntervalNull() {
                this[this.tableConnectionGuard.LoginIntervalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownTimeNull() {
                return this.IsNull(this.tableConnectionGuard.DownTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownTimeNull() {
                this[this.tableConnectionGuard.DownTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerConnectionsRow : global::System.Data.DataRow {
            
            private ServerConnectionsDataTable tableServerConnections;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerConnectionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerConnections = ((ServerConnectionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServerList {
                get {
                    try {
                        return ((string)(this[this.tableServerConnections.ServerListColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServerList\' in table \'ServerConnections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerConnections.ServerListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Timeout {
                get {
                    try {
                        return ((int)(this[this.tableServerConnections.TimeoutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Timeout\' in table \'ServerConnections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerConnections.TimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerListNull() {
                return this.IsNull(this.tableServerConnections.ServerListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerListNull() {
                this[this.tableServerConnections.ServerListColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeoutNull() {
                return this.IsNull(this.tableServerConnections.TimeoutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeoutNull() {
                this[this.tableServerConnections.TimeoutColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PoolOptimizerRow : global::System.Data.DataRow {
            
            private PoolOptimizerDataTable tablePoolOptimizer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PoolOptimizerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePoolOptimizer = ((PoolOptimizerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PollingInterval {
                get {
                    try {
                        return ((int)(this[this.tablePoolOptimizer.PollingIntervalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PollingInterval\' in table \'PoolOptimizer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoolOptimizer.PollingIntervalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectLifeTime {
                get {
                    try {
                        return ((int)(this[this.tablePoolOptimizer.ObjectLifeTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectLifeTime\' in table \'PoolOptimizer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoolOptimizer.ObjectLifeTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPollingIntervalNull() {
                return this.IsNull(this.tablePoolOptimizer.PollingIntervalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPollingIntervalNull() {
                this[this.tablePoolOptimizer.PollingIntervalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectLifeTimeNull() {
                return this.IsNull(this.tablePoolOptimizer.ObjectLifeTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectLifeTimeNull() {
                this[this.tablePoolOptimizer.ObjectLifeTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LDCClientRow : global::System.Data.DataRow {
            
            private LDCClientDataTable tableLDCClient;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LDCClientRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLDCClient = ((LDCClientDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CommandIteration {
                get {
                    try {
                        return ((int)(this[this.tableLDCClient.CommandIterationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommandIteration\' in table \'LDCClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLDCClient.CommandIterationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HoldingTime {
                get {
                    try {
                        return ((int)(this[this.tableLDCClient.HoldingTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldingTime\' in table \'LDCClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLDCClient.HoldingTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TrafficDuration {
                get {
                    try {
                        return ((int)(this[this.tableLDCClient.TrafficDurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficDuration\' in table \'LDCClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLDCClient.TrafficDurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommandIterationNull() {
                return this.IsNull(this.tableLDCClient.CommandIterationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommandIterationNull() {
                this[this.tableLDCClient.CommandIterationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldingTimeNull() {
                return this.IsNull(this.tableLDCClient.HoldingTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldingTimeNull() {
                this[this.tableLDCClient.HoldingTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficDurationNull() {
                return this.IsNull(this.tableLDCClient.TrafficDurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficDurationNull() {
                this[this.tableLDCClient.TrafficDurationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TransactionSaverRow : global::System.Data.DataRow {
            
            private TransactionSaverDataTable tableTransactionSaver;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionSaverRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransactionSaver = ((TransactionSaverDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dsn {
                get {
                    try {
                        return ((string)(this[this.tableTransactionSaver.DsnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Dsn\' in table \'TransactionSaver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionSaver.DsnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServerName {
                get {
                    try {
                        return ((string)(this[this.tableTransactionSaver.ServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServerName\' in table \'TransactionSaver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionSaver.ServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableTransactionSaver.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'TransactionSaver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionSaver.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableTransactionSaver.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'TransactionSaver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionSaver.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataBaseName {
                get {
                    try {
                        return ((string)(this[this.tableTransactionSaver.DataBaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataBaseName\' in table \'TransactionSaver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionSaver.DataBaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExportPathFileName {
                get {
                    try {
                        return ((string)(this[this.tableTransactionSaver.ExportPathFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExportPathFileName\' in table \'TransactionSaver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionSaver.ExportPathFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDsnNull() {
                return this.IsNull(this.tableTransactionSaver.DsnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDsnNull() {
                this[this.tableTransactionSaver.DsnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerNameNull() {
                return this.IsNull(this.tableTransactionSaver.ServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerNameNull() {
                this[this.tableTransactionSaver.ServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableTransactionSaver.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableTransactionSaver.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableTransactionSaver.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableTransactionSaver.PasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataBaseNameNull() {
                return this.IsNull(this.tableTransactionSaver.DataBaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataBaseNameNull() {
                this[this.tableTransactionSaver.DataBaseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExportPathFileNameNull() {
                return this.IsNull(this.tableTransactionSaver.ExportPathFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExportPathFileNameNull() {
                this[this.tableTransactionSaver.ExportPathFileNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConnectionsRow : global::System.Data.DataRow {
            
            private ConnectionsDataTable tableConnections;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnections = ((ConnectionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LDCServers {
                get {
                    try {
                        return ((string)(this[this.tableConnections.LDCServersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LDCServers\' in table \'Connections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnections.LDCServersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Clients {
                get {
                    try {
                        return ((int)(this[this.tableConnections.ClientsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Clients\' in table \'Connections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnections.ClientsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemotingPortNumber {
                get {
                    try {
                        return ((int)(this[this.tableConnections.RemotingPortNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemotingPortNumber\' in table \'Connections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnections.RemotingPortNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLDCServersNull() {
                return this.IsNull(this.tableConnections.LDCServersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLDCServersNull() {
                this[this.tableConnections.LDCServersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientsNull() {
                return this.IsNull(this.tableConnections.ClientsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientsNull() {
                this[this.tableConnections.ClientsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemotingPortNumberNull() {
                return this.IsNull(this.tableConnections.RemotingPortNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemotingPortNumberNull() {
                this[this.tableConnections.RemotingPortNumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LogWriterRowChangeEvent : global::System.EventArgs {
            
            private LogWriterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogWriterRowChangeEvent(LogWriterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogWriterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MailSenderRowChangeEvent : global::System.EventArgs {
            
            private MailSenderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailSenderRowChangeEvent(MailSenderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailSenderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientConnectionsRowChangeEvent : global::System.EventArgs {
            
            private ClientConnectionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientConnectionsRowChangeEvent(ClientConnectionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientConnectionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConnectionGuardRowChangeEvent : global::System.EventArgs {
            
            private ConnectionGuardRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionGuardRowChangeEvent(ConnectionGuardRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionGuardRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerConnectionsRowChangeEvent : global::System.EventArgs {
            
            private ServerConnectionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerConnectionsRowChangeEvent(ServerConnectionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerConnectionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PoolOptimizerRowChangeEvent : global::System.EventArgs {
            
            private PoolOptimizerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoolOptimizerRowChangeEvent(PoolOptimizerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoolOptimizerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LDCClientRowChangeEvent : global::System.EventArgs {
            
            private LDCClientRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LDCClientRowChangeEvent(LDCClientRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LDCClientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TransactionSaverRowChangeEvent : global::System.EventArgs {
            
            private TransactionSaverRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionSaverRowChangeEvent(TransactionSaverRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionSaverRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConnectionsRowChangeEvent : global::System.EventArgs {
            
            private ConnectionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionsRowChangeEvent(ConnectionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591